<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 회원정보 처리 SQL -->
<mapper namespace="com.test.memory.dao.MemberMapper">

	<!-- 회원 가입 정보 저장 -->
	<insert id="join" parameterType="MemberVO">
	INSERT INTO T_MEMBER VALUES (MEM_NO.NEXTVAL, #{mem_pwd}, #{name}, #{email}, 0, #{mem_image, jdbcType=VARCHAR}, 0)
	</insert>
	
	<!-- 이메일 중복 체크 -->
	<select id="emailCheck" parameterType="MemberVO" resultType="MemberVO">
		SELECT * FROM T_MEMBER WHERE EMAIL = #{email}
	</select>
	
	<!-- 로그인 -->
	<select id="login" parameterType="MemberVO" resultType="MemberVO">
		SELECT * FROM T_MEMBER WHERE EMAIL = #{email} AND MEM_PWD = #{mem_pwd}
	</select>
	
	<!-- 회원탈퇴 -->
	<delete id="unregister" parameterType="MemberVO">
		DELETE FROM T_MEMBER WHERE EMAIL = #{email} AND MEM_PWD = #{mem_pwd}
	</delete>
	
	<!-- 회원목록 -->
	<select id="getList" resultType="MemberVO">
		SELECT * FROM T_MEMBER WHERE email !='admin'
	</select>
	
	<!-- 계정정지-->
	<update id="click" parameterType="MemberVO">
		UPDATE T_MEMBER SET 
		<if test="approvalNum ==1">
		approvalNum = '0' 
		</if>
		<if test="approvalNum ==0">
		approvalNum = '1' 
		</if>
		WHERE NAME = #{name}
	</update>
	
	<!-- 프로필 사진 -->
	<update id="profilePhoto" parameterType="MemberVO">
		UPDATE T_MEMBER SET MEM_IMAGE = #{mem_image} WHERE EMAIL = #{email}
	</update>
	
	<!-- 프로필 수정 -->
	<update id="infoUpdate" parameterType="MemberVO">
		UPDATE T_MEMBER SET NAME = #{name}, MEM_PWD = #{mem_pwd}, INFONUMBER = #{infoNumber} WHERE EMAIL = #{email}
	</update>
	
	<!-- 회원검색 -->
	<select id="findMember" parameterType="String" resultType="MemberVO">
<!-- 		SELECT name, email FROM T_MEMBER WHERE NAME LIKE '%'||#{name}||'%' or EMAIL LIKE '%'||#{email}||'%' order by mem_no desc -->
		SELECT * FROM T_MEMBER WHERE (EMAIL != #{0} and EMAIL != 'admin') and (NAME LIKE '%'||#{1}||'%' or EMAIL LIKE '%'||#{1}||'%') order by mem_no desc
	</select>
	
	<!-- 친구추가 -->
	<insert id="addFriend" parameterType="FriendVO">
		INSERT INTO T_FRIEND VALUES (#{myEmail}, #{friend_Email}, '1')
	</insert>
	
	<!-- 친구삭제 -->
	<delete id="deleteFriend" parameterType="FriendVO">
		DELETE FROM T_FRIEND WHERE FRIEND_EMAIL = #{friend_Email}
	</delete>
	
	<!-- 친구목록 가져오기 -->
	<select id="getFriendList" parameterType="String" resultType="FriendVO">
		SELECT f.friend_Email, m.name, m.MEM_IMAGE, m.infonumber FROM T_FRIEND f, T_MEMBER m
		WHERE m.email = f.friend_Email and f.MEM_EMAIL = #{loginEmail}
	</select>
	
	<!-- 친구 중복체크 -->
	<select id="friendCheck" parameterType="String" resultType="String">
		SELECT f.friend_Email FROM T_FRIEND f, T_MEMBER m
		WHERE m.email = f.friend_Email and f.MEM_EMAIL = #{myEmail}
	</select>
	
	<select id="getFriendmemNo" resultType="Int" parameterType="String">
		SELECT MEM_NO FROM T_MEMBER WHERE email = #{email}
	</select>
	
	<!-- 노트공개여부검사 -->
	<select id="getInfoNumber" resultType="Int" parameterType="Int">
		SELECT INFONUMBER FROM T_MEMBER WHERE MEM_NO = #{mem_no}
	</select>
	
	<!-- 자신의 정보 -->
	<select id="myList" resultType="MemberVO">
		SELECT * FROM T_MEMBER WHERE email = #{email}
	</select>
	
	
</mapper>