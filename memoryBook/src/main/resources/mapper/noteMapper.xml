<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.test.memory.dao.NoteMapper">

	<resultMap type="noteVO" id="noteMap">
		<result property="noteNo" column="note_no" />
		<result property="memberNo" column="mem_no" />
		<result property="noteContent" column="note_content" />
		<result property="noteTitle" column="note_title" />
		<result property="noteRegDate" column="note_reg_date" />
		<result property="noteUpdateDate" column="note_update_date" />
		<result property="noteAuth" column="note_auth" />
		<result property="categoryNo" column="category_no" />
		<result property="categoryName" column="category_name" />
		<result property="email" column="email" />
	</resultMap>	
	<resultMap type="categoryVO" id="categoryMap">
		<result property="categoryNo" column="category_no"/>
		<result property="categoryName" column="category_name"/>
		<result property="memberNo" column="mem_no"/>
	</resultMap>
	
	<!-- 노트 등록 -->	
	<insert id="insertNote" parameterType="noteVO">
		insert into t_note values (
			NOTE_NO.NEXTVAL, #{memberNo}, #{categoryNo}, #{noteContent}, #{noteTitle}, SYSDATE, SYSDATE, #{noteAuth}
		)
	</insert>
	
	<!-- 노트 수정 -->
	<update id="updateNote" parameterType="noteVO">
		update t_note 
		   set note_title = #{noteTitle},
		       category_no = #{categoryNo},
		       note_content = #{noteContent},
		       note_auth = #{noteAuth},
		       note_update_date = SYSDATE
	     where note_no = #{noteNo}
	</update>
	
	<!-- 노트 리스트 -->
	<select id="noteList" parameterType="noteVO" resultMap="noteMap">
		select 
			n.note_no,
			n.mem_no,
			n.category_no,
			n.note_content,
			c.category_name,
			n.note_title,
			n.note_auth,
			n.note_reg_date,
			n.note_update_date
		  from t_note n inner join t_category c
		    on n.category_no = c.category_no 
		 where n.mem_no = #{memberNo}
		 
		 	<if test='searchWrd != "" and searchWrd != null '>
				AND (
						(n.note_content LIKE '%'||#{searchWrd}||'%')
						OR
						(n.note_title LIKE '%'||#{searchWrd}||'%')
					)
			</if>
		 order by n.note_no desc
	</select>
	
	<!-- 친구의 노트 리스트 -->
	<select id="fnoteList" parameterType="noteVO" resultMap="noteMap">
		select 
			n.note_no,
			n.mem_no,
			n.category_no,
			n.note_content,
			c.category_name,
			n.note_title,
			n.note_reg_date,
			n.note_update_date
		  from t_note n inner join t_category c
		    on n.category_no = c.category_no 
		 where n.mem_no = #{memberNo} and n.note_auth = 0
		 order by n.note_no desc
	</select>
	
	<!-- 노트 카테고리 리스트 -->
	<select id="noteCategoryList" parameterType="noteVO" resultMap="noteMap">
		select 
			n.note_no,
			n.mem_no,
			n.category_no,
			n.note_content,
			c.category_name,
			n.note_title,
			n.note_reg_date,
			n.note_update_date
		  from t_note n inner join t_category c
		    on n.category_no = c.category_no 
		 where n.mem_no = #{memberNo}
		   and c.category_no = #{categoryNo}
		 order by n.note_no desc
	</select>
	
	<!-- 노트 등록날짜 리스트 -->
	<select id="noteByDate" parameterType="hashmap" resultMap="noteMap">
		select 
			n.note_no,
			n.mem_no,
			n.category_no,
			n.note_content,
			c.category_name,
			n.note_title,
			n.note_reg_date,
			n.note_update_date
		  from t_note n inner join t_category c
		    on n.category_no = c.category_no 
		 where n.mem_no = #{memberNo}
		   and n.note_reg_date between #{date1} and #{date2}
		 order by n.note_no desc
	</select>
	
	<!-- 카테고리 리스트 -->
	<select id="getCategory" parameterType="int" resultMap="categoryMap">
		select *
		  from t_category
		 where mem_no = #{memberNo} order by category_name
	</select>
	
	<!-- 친구의 카테고리 리스트 -->
	<select id="getFriendCategory" parameterType="int" resultMap="categoryMap">
		select *
		  from t_category
		 where mem_no = #{memberNo} order by category_name
	</select>
	
	<!-- 카테고리 등록 -->
	<insert id="addCategory" parameterType="categoryVO" useGeneratedKeys="true" keyProperty="noteNo">
		insert into t_category values (
			CATEGORY_NO.NEXTVAL, #{memberNo}, #{categoryName}
		)
	</insert>
	
	<!-- 카테고리 수정 -->
	<update id="noteCategoryUpdate" parameterType="categoryVO">
		update t_category 
		   set category_name = #{categoryName}
	     where category_no = #{categoryNo}
	</update>
	
	<!-- 노트 디테일 -->
	<select id="noteDetail" parameterType="int" resultMap="noteMap">
		select n.note_no,
			   n.mem_no,
			   n.category_no,
		       n.note_content,
			   c.category_name,
			   n.note_title,
			   n.note_auth,
			   n.note_reg_date,
			   n.note_update_date
		  from t_note n inner join t_category c
		    on n.category_no = c.category_no 
		 where note_no = #{noteNo}
	</select>
	
	<!-- 이메일로 보낼 노트 -->
	<select id="emailNote" parameterType="NoteVO" resultMap="noteMap">
		select n.note_no,
			n.mem_no,
			n.category_no,
			n.note_content,
			m.email,
			n.note_title,
			n.note_reg_date
		   from t_note n inner join t_member m
		    on n.mem_no = m.mem_no 
		 where n.note_no = #{noteNo}
	</select>
	
	<!-- 노트 삭제 -->
	<delete id="deleteNote" parameterType="int">
		delete 
		  from t_note
		 where note_no = #{noteNo}
	</delete>
	
	<!-- 카테고리 삭제 -->
	<delete id="deleteCategory" parameterType="int">
		delete 
		  from t_category
		 where category_no = #{categoryNo}
	</delete>
</mapper>

